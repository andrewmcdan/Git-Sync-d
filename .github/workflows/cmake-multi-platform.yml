# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build on Windows, Linux, and MacOS

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            boost_install_dir: C:\Users\Andrew\Documents\Projects\
            boost_version: 1.83.0
            boost_platform_version: 2022
            boost_toolset: msvc
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            boost_install_dir: /home/runner/
            boost_version: 1.83.0
            boost_platform_version: 22.04
            boost_toolset: gcc
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            boost_install_dir: /home/runner/
            boost_version: 1.83.0
            boost_platform_version: 22.04
            boost_toolset: gcc
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
            boost_install_dir: /Users/runner/
            boost_version: 1.83.0
            boost_platform_version: 11.0
            boost_toolset: clang
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: clang

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install boost
      uses: MarkusJx/install-boost@v2.4.4
      id: install-boost
      with:
          # REQUIRED: Specify the required boost version
          # A list of supported versions can be found here:
          # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
          boost_version: ${{ matrix.boost_version }}
          # OPTIONAL: Specify a custom install location
          boost_install_dir: ${{ matrix.boost_install_dir }}
          # OPTIONAL: Specify a platform version
          platform_version: ${{matrix.boost_platform_version}}
          # OPTIONAL: Specify a toolset
          toolset: ${{matrix.boost_toolset}}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target all -D CMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ steps.strings.outputs.build-output-dir }}/bin

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: executable-${{ matrix.os }}
        path: ${{ steps.strings.outputs.build-output-dir }}/bin
